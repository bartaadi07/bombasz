name: Generate manifests
on:
  push:
    paths:
      - "zip/**"
      - ".github/workflows/generate-manifests.yml"
  workflow_dispatch:

jobs:
  build-manifests:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate manifest.json for each volume
        shell: python
        run: |
          import os, json, re, sys
          ZIP_DIR = 'zip'
          IMAGE_EXT = ('.jpg','.jpeg','.png','.webp','.JPG','.JPEG','.PNG','.WEBP')

          def natkey(s):
              return [int(t) if t.isdigit() else t.lower() for t in re.split(r'(\d+)', s)]

          if not os.path.isdir(ZIP_DIR):
              sys.exit(0)

          for vol in sorted(os.listdir(ZIP_DIR)):
              vol_path = os.path.join(ZIP_DIR, vol)
              if not os.path.isdir(vol_path):
                  continue

              files = []
              for root, dirs, filenames in os.walk(vol_path):
                  rel_root = os.path.relpath(root, vol_path)
                  for fn in filenames:
                      if fn.endswith(IMAGE_EXT):
                          rel = fn if rel_root == '.' else os.path.join(rel_root, fn)
                          files.append(rel.replace(os.sep, '/'))

              files.sort(key=lambda p: [natkey(seg) for seg in p.split('/')])

              if files:
                  out = os.path.join(vol_path, 'manifest.json')
                  with open(out, 'w', encoding='utf-8') as f:
                      json.dump(files, f, ensure_ascii=False, indent=2)
                      f.write('\n')
                  print('wrote', out)

      - name: Commit and push manifests
        shell: bash
        run: |
          set -e
          if git status --porcelain | grep -q 'zip/.*manifest.json'; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add zip/**/manifest.json
            if git diff --staged --quiet; then
              echo "No changes to commit."
            else
              git commit -m "chore: auto-generate manifests"
              git pull --rebase
              git push
            fi
          else
            echo "No changes to commit."
          fi
